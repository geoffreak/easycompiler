// Generated by CoffeeScript 1.9.3
var co, genToPromise, nodeCallbackToPromise,
  slice = [].slice;

co = require('co');


/*
 * Convert generator function into one that returns a promise
 * @param {Function*<T>|Function<T>} generator - The generator function (or regular one)
 * @returns {Function<Promise<T>>} - Returns a function that returns the same value as the generator, but via a promise
 */

module.exports.genToPromise = genToPromise = function(generator) {
  return function() {
    var args, context;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    context = this;
    return new Promise(function(resolve, reject) {
      co(function*() {
        var err;
        try {
          if (generator.constructor.name === 'GeneratorFunction') {
            resolve((yield generator.apply(context, args)));
          } else {
            resolve(generator.apply(context, args));
          }
        } catch (_error) {
          err = _error;
          reject(err);
        }
      })();
    });
  };
};


/*
 * Convert a function that uses a node style callback into a promise
 * @param {Function<T>([args...,] cb)} fn - The function that takes a node-styled callback (last parameter callback)
 * @param {boolean} [resolveAllArgs=false] - Resolve more than one argument from the callback, but as an array
 * @returns {Function<Promise<T>>([args...])} - Returns a function that returns the same value as the function, but via a promise
 */

module.exports.nodeCallbackToPromise = nodeCallbackToPromise = function(fn, resolveAllArgs) {
  if (resolveAllArgs == null) {
    resolveAllArgs = false;
  }
  return function() {
    var args, context;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    context = this;
    return new Promise(function(resolve, reject) {
      var cb;
      cb = function() {
        var err, result;
        err = arguments[0], result = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (err) {
          reject(err);
        } else {
          resolve(resolveAllArgs ? result : result[0]);
        }
      };
      fn.apply(context, args.concat([cb]));
    });
  };
};
