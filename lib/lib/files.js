// Generated by CoffeeScript 1.9.3
var Debug, Fs, Path, copyFile, debug, genToPromise, isAccessible, nodeCallbackToPromise, ref, removeFile, renameFile;

Debug = require('debug');

Fs = require('fs');

Path = require('path');

ref = require('./promisify'), genToPromise = ref.genToPromise, nodeCallbackToPromise = ref.nodeCallbackToPromise;

debug = Debug('easyc:files');


/*
 * Remove a file
 * @param {string} file - Path to the file to remove
 * @returns {Promise<boolean>} If the file was removed
 */

module.exports.removeFile = removeFile = genToPromise(function*(file) {
  debug('Removing %s', file);
  if (!((yield isAccessible(file, true)))) {
    debug('Aborting remove: File does not exist');
    return false;
  }
  (yield nodeCallbackToPromise(Fs.unlink)(file));
  return true;
});


/*
 * Rename a file (if we have access)
 * @param {string} source - Path to the file
 * @param {string} destination - Desired path to move to
 * @returns {Promise<boolean>} If the file was renamed
 */

module.exports.renameFile = renameFile = genToPromise(function*(source, destination) {
  debug('Renaming %s to %s', source, destination);
  if (!((yield isAccessible(source, true)))) {
    debug('Aborting rename: Source does not exist');
    return false;
  }
  (yield nodeCallbackToPromise(Fs.rename)(source, destination));
  return true;
});


/*
 * Copy a file
 * @param {string} source - Path to the file
 * @param {string} destination - Destination file (that doesn't exist yet)
 * @returns {Promise<boolean>} If the file was copied
 */

module.exports.copyFile = copyFile = genToPromise(function*(source, destination) {
  debug('Attempting to copy %s to %s', source, destination);
  if (!((yield isAccessible(source, true)))) {
    debug('Aborting copy: Source does not exist');
    return false;
  }
  if (!((yield isAccessible(Path.dirname(destination), true)))) {
    debug('Aborting copy: Destination directory not exist');
    return false;
  }
  return (yield new Promise(function(resolve, reject) {
    var rd, wr;
    rd = Fs.createReadStream(source);
    rd.on('error', function(err) {
      debug('Aborting copy: Readstream has encountered an error');
      reject(err);
    });
    wr = Fs.createWriteStream(destination);
    wr.on('error', function(err) {
      debug('Aborting copy: Writestream has encountered an error');
      reject(err);
    });
    wr.on('close', function(ex) {
      debug('Copy has completed from %s to %s', source, destination);
      resolve(true);
    });
    rd.pipe(wr);
  }));
});


/*
 * Check if a file exists at a path
 * @param {string} path - Path to the file
 * @param {boolean} [writeable=false] - Check if file is also writeable
 * @returns {Promise<boolean>} If the file is accessible
 */

module.exports.isAccessible = isAccessible = genToPromise(function*(path, writeable) {
  var err, flags;
  if (writeable == null) {
    writeable = false;
  }
  debug('Checking if %s is accessible (writeable=%s)', path, writeable);
  if (Fs.constants != null) {
    flags = writeable ? Fs.constants.R_OK | Fs.constants.W_OK : Fs.constants.F_OK;
  } else {
    flags = writeable ? Fs.R_OK | Fs.W_OK : Fs.F_OK;
  }
  try {
    (yield nodeCallbackToPromise(Fs.access)(path, flags));
  } catch (_error) {
    err = _error;
    if (err.code === 'ENOENT') {
      return false;
    }
    throw err;
  }
  return true;
});
