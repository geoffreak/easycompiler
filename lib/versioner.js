// Generated by CoffeeScript 1.9.3
var Versioner, _, copyFile, fs, genToPromise, hashFiles, nodeCallbackToPromise, path, ref, ref1, renameFile;

fs = require('co-fs-plus');

hashFiles = require('hash-files');

_ = require('lodash');

path = require('path');

ref = require('./lib/files'), renameFile = ref.renameFile, copyFile = ref.copyFile;

ref1 = require('./lib/promisify'), genToPromise = ref1.genToPromise, nodeCallbackToPromise = ref1.nodeCallbackToPromise;

Versioner = (function() {
  function Versioner() {
    this.store = {};
  }

  Versioner.prototype.version = genToPromise(function*(pack, files, options) {
    var directory, file, filename, hash, i, inBuildDirectory, len, newPath, pathToFile, relativePath, sourceFile, success, webPath;
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      pathToFile = path.join(options.webRoot, file);
      if (this.store[pathToFile] != null) {
        continue;
      }
      relativePath = path.relative(pathToFile, options.buildRoot);
      inBuildDirectory = relativePath.match(/[^\.\/]/) == null;
      filename = path.basename(pathToFile);
      directory = path.resolve(options.webRoot, path.dirname(file).substr(1));
      sourceFile = path.resolve(directory, filename);
      webPath = path.relative(options.root, directory);
      hash = (yield nodeCallbackToPromise(hashFiles)({
        files: [sourceFile],
        noGlob: true
      }));
      if (inBuildDirectory) {
        newPath = path.resolve(directory, hash + "." + filename);
        success = (yield renameFile(sourceFile, newPath));
        if (!success) {
          throw new Error('Unable to move files');
        }
      } else {
        newPath = path.resolve(options.buildRoot, pack, webPath, hash + "." + filename);
        (yield fs.mkdirp(path.dirname(newPath)));
        success = (yield copyFile(sourceFile, newPath));
        if (!success) {
          throw new Error('Unable to copy files');
        }
      }
      this.store[pathToFile] = '/' + path.relative(options.webRoot, newPath);
    }
    return _.map(files, (function(_this) {
      return function(file) {
        pathToFile = path.join(options.webRoot, file);
        return _this.store[pathToFile];
      };
    })(this));
  });

  return Versioner;

})();

module.exports = Versioner;
