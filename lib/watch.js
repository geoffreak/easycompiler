// Generated by CoffeeScript 1.9.3
var Watch, _, child, chokidar, co, cofs, compiler, debug, fs, path,
  slice = [].slice;

path = require('path');

fs = require('fs');

cofs = require('co-fs-plus');

child = require('child_process');

_ = require('lodash');

debug = require('debug')('compiler:watch');

co = require('co');

compiler = require('./compiler');

chokidar = require('chokidar');

Watch = (function() {
  function Watch() {}

  Watch._tasks = [];

  Watch.watch = function*() {
    debug('Starting watch process');
    this._watchConfig();
    this.config = JSON.parse((yield cofs.readFile('easycompile.json', 'utf-8')));
    this._watchFilesInConfig();
    return this._startCompile();
  };

  Watch.abort = function(app, pack, part) {
    var i, kill, len, ref, task;
    ref = this._tasks;
    for (i = 0, len = ref.length; i < len; i++) {
      task = ref[i];
      kill = false;
      if ((app == null) || task.app === app) {
        kill = true;
        app = pack = part = null;
      } else if ((pack == null) || task.pack === pack) {
        kill = true;
        pack = part = null;
      } else if ((part == null) || task.part === part) {
        kill = true;
        part = null;
      }
      debug('Killing task', task.app, task.pack, task.part);
      if (kill) {
        try {
          task.fork.kill();
        } catch (_error) {}
        task.killed = true;
      }
    }
    return [app, pack, part];
  };

  Watch._watchingConfig = false;

  Watch._watchConfig = function() {
    if (this._watchingConfig) {
      return;
    }
    fs.watch(path.relative(process.cwd(), 'easycompile.json'), (function(_this) {
      return function() {
        debug('Config change');
        _this.abort();
        _.each(_this._configWatches, function(unwatch) {
          return unwatch();
        });
        _.each(_this._fileWatches, function(watch) {
          return watch.unwatch();
        });
        return co(function*() {
          return (yield _this.watch());
        })();
      };
    })(this));
    return this._watchingConfig = true;
  };

  Watch._startCompile = function(app, pack, part) {
    var args, fork, ref, task;
    ref = this.abort(app, pack, part), app = ref[0], pack = ref[1], part = ref[2];
    debug("Compiling", app, pack, part);
    args = [];
    if (app != null) {
      args.push(app);
      if (pack != null) {
        args.push(pack);
        if (part != null) {
          args.push(part);
        }
      }
    }
    fork = child.fork(path.resolve(__dirname, 'watchRun.js'), args, {
      env: process.env
    });
    task = {
      fork: fork,
      app: app,
      pack: pack,
      part: part
    };
    this._tasks.push(task);
    fork.on('error', (function(_this) {
      return function(e) {
        return console.error(e.toString());
      };
    })(this));
    return fork.on('exit', (function(_this) {
      return function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        _this._tasks = _.without(_this._tasks, task);
        if (task.killed) {
          return;
        }
        return co(function*() {
          return (yield _this._loadTemplateWatches(app, pack));
        })();
      };
    })(this));
  };

  Watch._loadTemplateWatches = function*(app, pack) {
    var _app, _pack, appConfig, packConfig, ref, results, results1;
    debug('Loading watches for ', app, pack);
    try {
      results = JSON.parse((yield cofs.readFile('.easyc/data.json', 'utf-8')));
    } catch (_error) {}
    results1 = [];
    for (_app in results) {
      appConfig = results[_app];
      if (!((app == null) || app === _app)) {
        continue;
      }
      ref = appConfig.javascripts;
      for (_pack in ref) {
        packConfig = ref[_pack];
        if ((pack == null) || pack === _pack) {
          if (packConfig.deps != null) {
            this._watch(_app, _pack, 'javascripts', packConfig.deps);
          }
        }
      }
      results1.push((function() {
        var ref1, results2;
        ref1 = appConfig.stylesheets;
        results2 = [];
        for (_pack in ref1) {
          packConfig = ref1[_pack];
          if ((pack == null) || pack === _pack) {
            if (packConfig.deps != null) {
              results2.push(this._watch(_app, _pack, 'stylesheets', packConfig.deps));
            } else {
              results2.push(void 0);
            }
          }
        }
        return results2;
      }).call(this));
    }
    return results1;
  };

  Watch._fileWatches = [];

  Watch._watch = function(app, pack, type, files) {
    var fswatcher, ready, unwatch, watch;
    debug(type + " dependency watching", app, pack);
    _.each(this._fileWatches, function(watch) {
      if (watch.app === app && watch.pack === pack && watch.type === type) {
        return watch.unwatch();
      }
    });
    fswatcher = chokidar.watch(files);
    ready = false;
    fswatcher.on('all', (function(_this) {
      return function(event, file) {
        if (event === 'add' && !ready) {
          return;
        }
        debug("File change: " + file);
        return _this._startCompile(app, pack, type);
      };
    })(this));
    fswatcher.on('ready', (function(_this) {
      return function() {
        return ready = true;
      };
    })(this));
    unwatch = (function(_this) {
      return function() {
        _this._fileWatches = _.without(_this._fileWatches, watch);
        return fswatcher.close();
      };
    })(this);
    watch = {
      unwatch: unwatch,
      app: app,
      pack: pack,
      type: type
    };
    return this._fileWatches.push(watch);
  };

  Watch._configWatches = [];

  Watch._watchFilesInConfig = function() {
    var app, appConfig, ref, results1;
    ref = this.config;
    results1 = [];
    for (app in ref) {
      appConfig = ref[app];
      this._configWatches.push(this._watchTree(this.config, app, appConfig, 'stylesheets'));
      results1.push(this._configWatches.push(this._watchTree(this.config, app, appConfig, 'javascripts')));
    }
    return results1;
  };

  Watch._watchTree = function(config, app, appConfig, type) {
    var fswatcher, ready, root, unwatch, watchFn;
    root = path.resolve(process.cwd(), appConfig[type].root);
    watchFn = (function(_this) {
      return function(filename) {
        var fn;
        fn = function*() {
          var contained, e, files, pack, packConfig, ref;
          try {
            if (typeof filename !== 'string') {
              return;
            }
            filename = path.relative(process.cwd(), filename);
            contained = false;
            ref = appConfig[type].packages;
            for (pack in ref) {
              packConfig = ref[pack];
              files = (yield compiler.loadFiles(appConfig[type].root, packConfig.files, packConfig.extensions || (type === 'stylesheets' ? 'css' : 'js'), [filename]));
              if (-1 !== _.indexOf(files, path.relative(appConfig[type].root, filename))) {
                contained = pack;
                break;
              }
            }
            if (!contained) {
              return;
            }
            debug("File change: " + filename);
            return _this._startCompile(app, contained, type);
          } catch (_error) {
            e = _error;
            return console.error(e.stack);
          }
        };
        return co(fn)();
      };
    })(this);
    fswatcher = chokidar.watch(root);
    ready = false;
    fswatcher.on('all', function(event, file) {
      if (event === 'add' && !ready) {
        return;
      }
      return watchFn(file);
    });
    fswatcher.on('ready', function() {
      return ready = true;
    });
    return unwatch = function() {
      this._configWatches = _.without(this._configWatches, unwatch);
      return fswatcher.close();
    };
  };

  return Watch;

})();

process.on('exit', function() {
  return Watch.abort();
});

module.exports = Watch;
