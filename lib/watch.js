// Generated by CoffeeScript 1.9.1
var Watch, _, child, chokidar, co, cofs, compiler, debug, fs, path,
  slice = [].slice;

path = require('path');

fs = require('fs');

cofs = require('co-fs-plus');

child = require('child_process');

_ = require('lodash');

debug = require('debug')('compiler:watch');

co = require('co');

compiler = require('./compiler');

chokidar = require('chokidar');

Watch = (function() {
  function Watch() {}

  Watch._tasks = [];

  Watch.watch = function*() {
    var config;
    debug('Starting watch process');
    this._watchConfig();
    config = JSON.parse((yield cofs.readFile('easycompile.json', 'utf-8')));
    this._watchFiles(config);
    return this._startCompile();
  };

  Watch.abort = function(app, pack, part) {
    return _.each(this._tasks, function(task) {
      if (((app == null) || task.app === app) || ((pack == null) || task.pack === pack) || ((part == null) || task.part === part)) {
        try {
          return task.fork.kill();
        } catch (_error) {}
      }
    });
  };

  Watch._watchingConfig = false;

  Watch._watchConfig = function() {
    if (this._watchingConfig) {
      return;
    }
    fs.watch(path.relative(process.cwd(), 'easycompile.json'), (function(_this) {
      return function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        debug('Config change');
        _this.abort();
        _.each(_this._unwatches, function(unwatch) {
          return unwatch();
        });
        _this._unwatches = [];
        return co(function*() {
          return (yield _this.watch());
        })();
      };
    })(this));
    return this._watchingConfig = true;
  };

  Watch._startCompile = function(app, pack, part) {
    var args, fork, task;
    debug("Compiling " + app + " " + pack + " " + part);
    args = [];
    if (app != null) {
      args.push(app);
      if (pack != null) {
        args.push(pack);
        if (part != null) {
          args.push(part);
        }
      }
    }
    fork = child.fork(path.resolve(__dirname, 'watchRun.js'), args, {
      env: process.env
    });
    task = {
      fork: fork,
      app: app,
      pack: pack,
      part: part
    };
    this._tasks.push(task);
    fork.on('error', (function(_this) {
      return function(e) {
        return console.error(e.toString());
      };
    })(this));
    return fork.on('exit', (function(_this) {
      return function() {
        return _this._tasks = _.without(_this._tasks, task);
      };
    })(this));
  };

  Watch._unwatches = [];

  Watch._watchFiles = function(config) {
    var app, appConfig, results;
    results = [];
    for (app in config) {
      appConfig = config[app];
      this._unwatches.push(this._watchTree(config, app, appConfig, 'stylesheets'));
      results.push(this._unwatches.push(this._watchTree(config, app, appConfig, 'javascripts')));
    }
    return results;
  };

  Watch._watchTree = function(config, app, appConfig, type) {
    var fswatcher, ready, root, unwatch, watchFn;
    root = path.resolve(process.cwd(), appConfig[type].root);
    watchFn = (function(_this) {
      return function(filename) {
        var fn;
        fn = function*() {
          var contained, e, files, pack, packConfig, ref;
          try {
            if (typeof filename !== 'string') {
              return;
            }
            filename = path.relative(process.cwd(), filename);
            contained = false;
            ref = appConfig[type].packages;
            for (pack in ref) {
              packConfig = ref[pack];
              files = (yield compiler.loadFiles(appConfig[type].root, packConfig.files, packConfig.extensions || (type === 'stylesheets' ? 'css' : 'js'), [filename]));
              if (-1 !== _.indexOf(files, path.relative(appConfig[type].root, filename))) {
                contained = pack;
                break;
              }
            }
            if (!contained) {
              return;
            }
            debug("File change: " + filename);
            return _this._startCompile(app, contained, type);
          } catch (_error) {
            e = _error;
            return console.error(e.stack);
          }
        };
        return co(fn)();
      };
    })(this);
    fswatcher = chokidar.watch(root);
    ready = false;
    fswatcher.on('all', function(event, file) {
      if (event === 'add' && !ready) {
        return;
      }
      return watchFn(file);
    });
    fswatcher.on('ready', function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return ready = true;
    });
    return unwatch = function() {
      return fswatcher.close();
    };
  };

  return Watch;

})();

process.on('exit', function() {
  return Watch.abort();
});

module.exports = Watch;
