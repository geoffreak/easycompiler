// Generated by CoffeeScript 1.9.3
var Compiler, _, exec, fs, util;

fs = require('co-fs-plus');

Compiler = require('./compiler');

_ = require('lodash');

util = require('util');

exec = require('child_process').exec;

module.exports = (function() {
  function exports() {}

  exports.compile = function*(options) {
    var config, previousResults, results;
    config = JSON.parse((yield fs.readFile('easycompile.json', 'utf-8')));
    try {
      previousResults = JSON.parse((yield fs.readFile('.easyc/data.json', 'utf-8')));
    } catch (_error) {}
    results = (yield Compiler.run(config, options, previousResults));
    (yield fs.mkdirp('.easyc/'));
    return (yield fs.writeFile('.easyc/data.json', JSON.stringify(results, null, 2)));
  };

  exports.load = function*() {
    var e;
    if (!this._cache) {
      try {
        this._cache = JSON.parse((yield fs.readFile('.easyc/data.json', 'utf-8')));
      } catch (_error) {
        e = _error;
        this._cache = (yield this.compile());
      }
    }
    return this._cache;
  };

  exports.setProduction = function(_production) {
    this._production = _production != null ? _production : true;
  };

  exports.getEnv = function() {
    if (this._production) {
      return 'prod';
    } else {
      return 'dev';
    }
  };

  exports.getJavascripts = function*(app, packs) {
    var config, pack, ref;
    config = (yield this.load());
    if ((config != null ? (ref = config[app]) != null ? ref.javascripts : void 0 : void 0) == null) {
      return [];
    }
    if (!util.isArray(packs)) {
      if (typeof packs === 'string') {
        packs = [packs];
      } else {
        packs = Object.keys(config[app].javascripts);
      }
    }
    return _.flatten((function() {
      var i, len, ref1, results1;
      results1 = [];
      for (i = 0, len = packs.length; i < len; i++) {
        pack = packs[i];
        results1.push(((ref1 = config[app].javascripts[pack]) != null ? ref1[this.getEnv()] : void 0) || []);
      }
      return results1;
    }).call(this));
  };

  exports.getStylesheets = function*(app, packs) {
    var config, pack, ref;
    config = (yield this.load());
    if ((config != null ? (ref = config[app]) != null ? ref.stylesheets : void 0 : void 0) == null) {
      return [];
    }
    if (!util.isArray(packs)) {
      if (typeof packs === 'string') {
        packs = [packs];
      } else {
        packs = Object.keys(config[app].stylesheets);
      }
    }
    return _.flatten((function() {
      var i, len, ref1, results1;
      results1 = [];
      for (i = 0, len = packs.length; i < len; i++) {
        pack = packs[i];
        results1.push(((ref1 = config[app].stylesheets[pack]) != null ? ref1[this.getEnv()] : void 0) || []);
      }
      return results1;
    }).call(this));
  };

  return exports;

})();
