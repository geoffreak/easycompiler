// Generated by CoffeeScript 1.9.1
var Template, _, debug, fs, path, uglify;

fs = require('co-fs-plus');

path = require('path');

_ = require('lodash');

Template = require('./template');

uglify = require('uglify-js');

debug = require('debug')('compiler:js');

module.exports = (function() {
  function exports() {}

  exports.compile = function*(pack, files, options, deps) {
    var file, i, j, len, len1, map, minified, minifiedFiles, output, outputWeb, ref, ref1, results, s, source, tc, webFiles, yields;
    debug("Compiling JavaScript for '" + pack + "'");
    files = _.map(files, (function(_this) {
      return function(file) {
        return path.resolve(options.root, file);
      };
    })(this));
    if (options.angularTemplates != null) {
      debug("Finding Angular Templates for '" + pack + "'");
      yields = [];
      tc = new Template(pack, options);
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        yields.push(tc.parseAndAddFromFile(file));
      }
      (yield yields);
      if (tc.hasTemplates()) {
        files.push((yield tc.writeCache()));
        deps.add(_.map(tc.getTemplatesList(), function(file) {
          return options.webRoot + file;
        }));
      }
    }
    minifiedFiles = [];
    if (!options.skipMinify) {
      debug("Minifying JavaScript for '" + pack + "' (" + files.length + " files)");
      if (files.length) {
        output = path.resolve(options.buildRoot, pack + ".min.js");
        outputWeb = path.relative(options.webRoot, output);
        minified = uglify.minify(files, {
          outSourceMap: (path.basename(outputWeb)) + ".map",
          compress: (ref = options.minify) === 'false' || ref === false ? false : {}
        });
        map = JSON.parse(minified.map);
        map.file = outputWeb;
        ref1 = map.sources;
        for (s = j = 0, len1 = ref1.length; j < len1; s = ++j) {
          source = ref1[s];
          map.sources[s] = '/' + path.relative(options.webRoot, source);
        }
        (yield fs.mkdirp(path.dirname(output)));
        (yield fs.writeFile(output, minified.code));
        (yield fs.writeFile(output + ".map", JSON.stringify(map)));
        minifiedFiles.push("/" + outputWeb);
      }
    }
    webFiles = _.map(files, (function(_this) {
      return function(file) {
        return '/' + path.relative(options.webRoot, file);
      };
    })(this));
    return results = {
      dev: webFiles,
      prod: minifiedFiles,
      deps: deps
    };
  };

  return exports;

})();
