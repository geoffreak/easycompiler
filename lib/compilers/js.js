// Generated by CoffeeScript 1.8.0
var Template, fs, path, uglify, _;

fs = require('co-fs-plus');

path = require('path');

_ = require('lodash');

Template = require('./template');

uglify = require('uglify-js');

module.exports = (function() {
  function exports() {}

  exports.compile = function*(pack, files, options) {
    var file, map, minified, minifiedFiles, output, outputWeb, results, s, source, tc, webFiles, yields, _i, _j, _len, _len1, _ref, _ref1;
    files = _.map(files, (function(_this) {
      return function(file) {
        return path.resolve(options.root, file);
      };
    })(this));
    if (options.angularTemplates != null) {
      yields = [];
      tc = new Template(pack, options);
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        yields.push(tc.parseAndAddFromFile(file));
      }
      (yield yields);
      if (tc.hasTemplates()) {
        files.push((yield tc.writeCache()));
      }
    }
    minifiedFiles = [];
    if (files.length) {
      output = path.resolve(options.buildRoot, pack + ".min.js");
      outputWeb = path.relative(options.webRoot, output);
      minified = uglify.minify(files, {
        outSourceMap: (path.basename(outputWeb)) + ".map",
        compress: (_ref = options.minify) === 'false' || _ref === false ? false : {}
      });
      map = JSON.parse(minified.map);
      map.file = outputWeb;
      _ref1 = map.sources;
      for (s = _j = 0, _len1 = _ref1.length; _j < _len1; s = ++_j) {
        source = _ref1[s];
        map.sources[s] = '/' + path.relative(options.webRoot, source);
      }
      (yield fs.mkdirp(path.dirname(output)));
      (yield fs.writeFile(output, minified.code));
      (yield fs.writeFile(output + ".map", JSON.stringify(map)));
      minifiedFiles.push("/" + outputWeb);
    }
    webFiles = _.map(files, (function(_this) {
      return function(file) {
        return '/' + path.relative(options.webRoot, file);
      };
    })(this));
    return results = {
      dev: webFiles,
      prod: minifiedFiles
    };
  };

  return exports;

})();
