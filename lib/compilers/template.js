// Generated by CoffeeScript 1.8.0
var fs, minify, path, regex, regexg;

fs = require('co-fs-plus');

path = require('path');

minify = require('html-minifier').minify;

regex = /templateUrl:[\s]*?("([^"\\]*(\\.[^"\\]*)*)"|\'([^\'\\]*(\\.[^\'\\]*)*)\')/i;

regexg = /templateUrl:[\s]*?("([^"\\]*(\\.[^"\\]*)*)"|\'([^\'\\]*(\\.[^\'\\]*)*)\')/gi;

module.exports = (function() {
  function exports(pack, config) {
    this.pack = pack;
    this.config = config;
    this.cache = {};
    this.templateCount = 0;
  }

  exports.prototype.parseAndAddFromFile = function*(file) {
    var content, match, matches, template, _i, _len, _results;
    content = (yield fs.readFile(file, 'utf-8'));
    matches = content.match(regexg);
    if (!(matches != null ? matches.length : void 0)) {
      return;
    }
    _results = [];
    for (_i = 0, _len = matches.length; _i < _len; _i++) {
      match = matches[_i];
      if (this.cache[match] != null) {
        continue;
      }
      try {
        match = match.match(regex);
        match = match[2] || match[4];
        file = match;
        if (match.charAt(0) === '/') {
          file = match.substr(1);
        }
        file = path.resolve(this.config.webRoot, file);
        template = (yield fs.readFile(file, 'utf-8'));
        _results.push(this.addTemplateToCache(match, template));
      } catch (_error) {}
    }
    return _results;
  };

  exports.prototype.addTemplateToCache = function(file, template) {
    this.cache[file] = minify(template, {
      removeComments: true,
      collapseWhitespace: true
    });
    return this.templateCount++;
  };

  exports.prototype.hasTemplates = function() {
    return this.templateCount > 0;
  };

  exports.prototype.writeCache = function*() {
    var content, file, output, template;
    output = path.resolve(this.config.buildRoot, this.pack + ".cache.js");
    content = "angular.module(" + (JSON.stringify(this.config.angularTemplates)) + ").run(['$templateCache', function($templateCache){\n  " + (((function() {
      var _ref, _results;
      _ref = this.cache;
      _results = [];
      for (file in _ref) {
        template = _ref[file];
        _results.push("$templateCache.put(" + (JSON.stringify(file)) + ", " + (JSON.stringify(template)) + ");");
      }
      return _results;
    }).call(this)).join("\n  ")) + "\n}]);";
    (yield fs.mkdirp(path.dirname(output)));
    (yield fs.writeFile(output, content));
    return output;
  };

  return exports;

})();
