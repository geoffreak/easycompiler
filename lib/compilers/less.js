// Generated by CoffeeScript 1.9.3
var Q, _, co, debug, fs, less, path, render;

fs = require('co-fs-plus');

path = require('path');

less = require('less');

Q = require('q');

debug = require('debug')('compiler:less');

render = Q.nbind(less.render, less);

co = require('co');

_ = require('lodash');

module.exports = (function() {
  function exports() {}

  exports.compilesTo = 'css';

  exports.compile = function*(pack, input, options, deps) {
    var compiled, content, e, inputWeb, output, outputWeb, sourceMapDefer;
    output = path.resolve(options.buildRoot, pack, input) + '.css';
    input = path.resolve(options.root, input);
    outputWeb = path.relative(options.webRoot, output);
    inputWeb = path.relative(options.webRoot, input);
    content = (yield fs.readFile(input, "utf-8"));
    (yield fs.mkdirp(path.dirname(output)));
    sourceMapDefer = Q.defer();
    try {
      compiled = (yield render(content, {
        compress: true,
        filename: inputWeb,
        paths: [path.join(options.webRoot, path.relative(options.webRoot, path.dirname(input)))],
        relativeUrls: true,
        rootpath: "/" + (path.relative(options.webRoot, path.dirname(output))),
        outputFilename: path.basename(output),
        sourceMap: true,
        sourceMapURL: (path.basename(output)) + ".map",
        sourceMapFilename: (path.join(options.webRoot, path.relative(options.webRoot, output))) + ".map",
        sourceMapBasepath: options.webRoot + "/",
        sourceMapRootpath: "/",
        writeSourceMap: function(map) {
          var sources;
          map = JSON.parse(map);
          sources = _.pull(map.sources, '/' + inputWeb);
          deps.add(_.map(sources, function(file) {
            return options.webRoot + file;
          }));
          return co(function*() {
            var e;
            try {
              (yield fs.writeFile(output + ".map", JSON.stringify(map)));
              return sourceMapDefer.resolve();
            } catch (_error) {
              e = _error;
              return sourceMapDefer.reject(e);
            }
          })();
        }
      }));
    } catch (_error) {
      e = _error;
      throw new Error("LESS Compile Error\n" + e.message + "\nFile: " + e.filename + " [line " + e.line + "]\n" + (e.extract.join('\n')));
    }
    (yield fs.writeFile(output, compiled));
    (yield sourceMapDefer.promise);
    return path.relative(options.root, output);
  };

  return exports;

})();
