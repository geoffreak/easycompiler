// Generated by CoffeeScript 1.9.3
var CSS, Deps, JS, Route, _, co, debug, fs, path,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('co-fs-plus');

debug = require('debug')('compiler');

_ = require('lodash');

path = require('path');

JS = require('./compilers/js');

CSS = require('./compilers/css');

Route = require('./compilers/route');

co = require('co');

Deps = require('./dependencies');

module.exports = (function() {
  function exports() {}

  exports.run = function*(config, options, previousResults) {
    var app, appConfig, key, pack, packConfig, ref, ref1, ref2, ref3, ref4, ref5, ref6, result, results, running, value;
    if (options != null ? options.clearBuildDirs : void 0) {
      debug('Clearing build directories');
      for (app in config) {
        appConfig = config[app];
        if ((config != null ? (ref = config.javascripts) != null ? ref.buildRoot : void 0 : void 0) != null) {
          (yield fs.rimraf(config.javascripts.buildRoot));
        }
        if ((config != null ? (ref1 = config.stylesheets) != null ? ref1.buildRoot : void 0 : void 0) != null) {
          (yield fs.rimraf(config.stylesheets.buildRoot));
        }
      }
    }
    if (options != null ? options.quickBuild : void 0) {
      debug('Enabling quick build');
      for (app in config) {
        appConfig = config[app];
        if (appConfig != null ? (ref2 = appConfig.javascripts) != null ? ref2.packages : void 0 : void 0) {
          ref3 = appConfig.javascripts.packages;
          for (pack in ref3) {
            packConfig = ref3[pack];
            packConfig.skipMinify = true;
          }
        }
        if (appConfig != null ? (ref4 = appConfig.stylesheets) != null ? ref4.packages : void 0 : void 0) {
          ref5 = appConfig.stylesheets.packages;
          for (pack in ref5) {
            packConfig = ref5[pack];
            packConfig.skipMinify = true;
          }
        }
      }
    }
    debug('Running compiler');
    results = previousResults || {};
    for (app in config) {
      appConfig = config[app];
      if (!(!(options != null ? (ref6 = options.onlyApp) != null ? ref6.length : void 0 : void 0) || options.onlyApp.indexOf(app) !== -1)) {
        continue;
      }
      result = (yield this.runApp(app, appConfig, options));
      if (results[app] == null) {
        results[app] = {};
      }
      for (key in result) {
        value = result[key];
        if (!_.isEmpty(value)) {
          results[app][key] = value;
        }
      }
    }
    running = false;
    debug('Compiler finished');
    return (yield results);
  };

  exports.runApp = function*(app, config, options) {
    var ref, ref1, ref2, result, yields;
    debug("Running app '" + app + "'");
    result = {
      javascripts: {},
      stylesheets: {}
    };
    yields = [];
    if (!(options != null ? (ref = options.onlyPart) != null ? ref.length : void 0 : void 0) || options.onlyPart.indexOf('javascripts') !== -1) {
      yields.push(this.runAppJs(app, config, result, options));
    }
    if (!(options != null ? (ref1 = options.onlyPart) != null ? ref1.length : void 0 : void 0) || options.onlyPart.indexOf('stylesheets') !== -1) {
      yields.push(this.runAppCss(app, config, result, options));
    }
    if (!(options != null ? (ref2 = options.onlyPart) != null ? ref2.length : void 0 : void 0) || options.onlyPart.indexOf('routing') !== -1) {
      yields.push(this.runAppRouting(app, config, result, options));
    }
    (yield yields);
    return result;
  };

  exports.runAppJs = function*(app, config, result) {
    var deps, files, options, pack, packConfig, ref, ref1, ref2, results1;
    if (config != null ? (ref = config.javascripts) != null ? ref.packages : void 0 : void 0) {
      ref1 = config.javascripts.packages;
      results1 = [];
      for (pack in ref1) {
        packConfig = ref1[pack];
        options = _.extend(_.omit(config.javascripts, 'packages'), _.omit(packConfig, 'files', 'extensions'));
        files = (yield this.loadFiles(config.javascripts.root, packConfig.files, packConfig.extensions || 'js'));
        ref2 = (yield this.buildNonNativeFiles(app + "/" + pack, files, options, 'js')), files = ref2[0], deps = ref2[1];
        results1.push(result.javascripts[pack] = (yield JS.compile(app + "/" + pack, files, options, deps)));
      }
      return results1;
    }
  };

  exports.runAppCss = function*(app, config, result) {
    var deps, files, options, pack, packConfig, ref, ref1, ref2, results1;
    if (config != null ? (ref = config.stylesheets) != null ? ref.packages : void 0 : void 0) {
      ref1 = config.stylesheets.packages;
      results1 = [];
      for (pack in ref1) {
        packConfig = ref1[pack];
        options = _.extend(_.omit(config.stylesheets, 'packages'), _.omit(packConfig, 'files', 'extensions'));
        files = (yield this.loadFiles(config.stylesheets.root, packConfig.files, packConfig.extensions || 'css'));
        ref2 = (yield this.buildNonNativeFiles(app + "/" + pack, files, options, 'css')), files = ref2[0], deps = ref2[1];
        results1.push(result.stylesheets[pack] = (yield CSS.compile(app + "/" + pack, files, options, deps)));
      }
      return results1;
    }
  };

  exports.runAppRouting = function*(app, config, result) {
    if (config != null ? config.routing : void 0) {
      return result.routing = (yield Route.compile(config.routing));
    }
  };

  exports.loadFiles = function*(root, rules, extensions, files) {
    var excludes, filtered, i, include, includes, isExclude, j, len, len1, rule;
    if (!(rules && root)) {
      return [];
    }
    extensions = extensions.split(' ');
    if (files == null) {
      files = (yield fs.readdir(root, null, []));
    }
    includes = [];
    excludes = [];
    for (i = 0, len = rules.length; i < len; i++) {
      rule = rules[i];
      isExclude = false;
      if (rule.indexOf('-') === 0) {
        isExclude = true;
        rule = rule.substr(1);
      }
      rule = rule.replace(/\*/g, '.*?');
      rule = new RegExp("^" + rule + "$", 'i');
      if (isExclude) {
        excludes.push(rule);
      } else {
        includes.push(rule);
      }
    }
    files = _.chain(files).filter((function(_this) {
      return function(file) {
        var ref;
        return ref = path.extname(file).substr(1), indexOf.call(extensions, ref) >= 0;
      };
    })(this)).map((function(_this) {
      return function(file) {
        return path.relative(root, file);
      };
    })(this)).filter((function(_this) {
      return function(file) {
        var exclude, j, len1;
        for (j = 0, len1 = excludes.length; j < len1; j++) {
          exclude = excludes[j];
          if (exclude.test(file)) {
            return false;
          }
        }
        return true;
      };
    })(this)).value();
    filtered = [];
    for (j = 0, len1 = includes.length; j < len1; j++) {
      include = includes[j];
      _.each(files, (function(_this) {
        return function(file) {
          if (include.test(file) && !_.contains(filtered, file)) {
            return filtered.push(file);
          }
        };
      })(this));
    }
    return filtered;
  };

  exports.buildNonNativeFiles = function*(pack, files, options, nativeType) {
    var builtFiles, compiler, deps, e, ext, f, file, i, len;
    deps = new Deps();
    builtFiles = [];
    for (f = i = 0, len = files.length; i < len; f = ++i) {
      file = files[f];
      ext = path.extname(file).substr(1);
      if (ext !== nativeType) {
        try {
          compiler = require("./compilers/" + ext);
          if (compiler.compilesTo !== nativeType) {
            throw new Error();
          }
        } catch (_error) {
          e = _error;
          throw new Error("Unsupported file type " + ext + "\n" + e.message);
        }
        builtFiles.push((yield compiler.compile(pack, file, options, deps)));
      } else {
        builtFiles.push(file);
      }
    }
    return [builtFiles, deps];
  };

  return exports;

})();
