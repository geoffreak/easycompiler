// Generated by CoffeeScript 1.9.1
var CSS, JS, Route, _, co, debug, fs, path, watch,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('co-fs-plus');

debug = require('debug')('compiler');

_ = require('lodash');

path = require('path');

JS = require('./compilers/js');

CSS = require('./compilers/css');

Route = require('./compilers/route');

watch = require('watch');

co = require('co');

module.exports = (function() {
  function exports() {}

  exports.run = function*(config, options) {
    var app, appConfig, pack, packConfig, ref, ref1, ref2, ref3, ref4, ref5, results, run, running;
    results = {};
    running = false;
    run = (function(_this) {
      return function*(config) {
        var app, appConfig;
        if (running) {
          return;
        }
        debug('Running compiler');
        running = true;
        for (app in config) {
          appConfig = config[app];
          results[app] = (yield _this.runApp(app, appConfig));
        }
        running = false;
        return debug('Compiler finished');
      };
    })(this);
    if (options != null ? options.clearBuildDirs : void 0) {
      debug('Clearing build directories');
      for (app in config) {
        appConfig = config[app];
        if ((config != null ? (ref = config.javascripts) != null ? ref.buildRoot : void 0 : void 0) != null) {
          (yield fs.rimraf(config.javascripts.buildRoot));
        }
        if ((config != null ? (ref1 = config.stylesheets) != null ? ref1.buildRoot : void 0 : void 0) != null) {
          (yield fs.rimraf(config.stylesheets.buildRoot));
        }
      }
    }
    if (options != null ? options.quickBuild : void 0) {
      debug('Enabling quick build');
      for (app in config) {
        appConfig = config[app];
        if (appConfig != null ? (ref2 = appConfig.javascripts) != null ? ref2.packages : void 0 : void 0) {
          ref3 = appConfig.javascripts.packages;
          for (pack in ref3) {
            packConfig = ref3[pack];
            packConfig.skipMinify = true;
          }
        }
        if (appConfig != null ? (ref4 = appConfig.stylesheets) != null ? ref4.packages : void 0 : void 0) {
          ref5 = appConfig.stylesheets.packages;
          for (pack in ref5) {
            packConfig = ref5[pack];
            packConfig.skipMinify = true;
          }
        }
      }
    }
    (yield run(config));
    if (options != null ? options.watch : void 0) {
      debug('Starting watch process');
      for (app in config) {
        appConfig = config[app];
        watch.watchTree(path.resolve(process.cwd(), appConfig.javascripts.root), (function(_this) {
          return function(filename) {
            return co(function*() {
              var contained, files, mapped, ref6;
              if (typeof filename !== 'string') {
                return;
              }
              filename = path.relative(process.cwd(), filename);
              contained = false;
              ref6 = appConfig.javascripts.packages;
              for (pack in ref6) {
                packConfig = ref6[pack];
                files = (yield _this.loadFiles(appConfig.javascripts.root, packConfig.files, packConfig.extensions || 'js'));
                if (-1 !== _.indexOf(files, path.relative(appConfig.javascripts.root, filename))) {
                  contained = true;
                  break;
                }
              }
              if (!contained) {
                return;
              }
              debug("File change: " + filename);
              mapped = _.mapValues(config, function(value, key) {
                return _.pick(value, 'javascripts');
              });
              return (yield run(mapped));
            })();
          };
        })(this));
        watch.watchTree(path.resolve(process.cwd(), appConfig.stylesheets.root), (function(_this) {
          return function(filename) {
            return co(function*() {
              var contained, files, mapped, ref6;
              if (typeof filename !== 'string') {
                return;
              }
              filename = path.relative(process.cwd(), filename);
              contained = false;
              ref6 = appConfig.stylesheets.packages;
              for (pack in ref6) {
                packConfig = ref6[pack];
                files = (yield _this.loadFiles(appConfig.stylesheets.root, packConfig.files, packConfig.extensions || 'css'));
                if (-1 !== _.indexOf(files, path.relative(appConfig.stylesheets.root, filename))) {
                  contained = true;
                  break;
                }
              }
              if (!contained) {
                return;
              }
              debug("File change: " + filename);
              mapped = _.mapValues(config, function(value, key) {
                return _.pick(value, 'stylesheets');
              });
              return (yield run(mapped));
            })();
          };
        })(this));
      }
    }
    return results;
  };

  exports.runApp = function*(app, config) {
    var result;
    debug("Running app '" + app + "'");
    result = {
      javascripts: {},
      stylesheets: {}
    };
    (yield [this.runAppJs(app, config, result), this.runAppCss(app, config, result), this.runAppRouting(app, config, result)]);
    return result;
  };

  exports.runAppJs = function*(app, config, result) {
    var files, options, pack, packConfig, ref, ref1, results1;
    if (config != null ? (ref = config.javascripts) != null ? ref.packages : void 0 : void 0) {
      ref1 = config.javascripts.packages;
      results1 = [];
      for (pack in ref1) {
        packConfig = ref1[pack];
        options = _.extend(_.omit(config.javascripts, 'packages'), _.omit(packConfig, 'files', 'extensions'));
        files = (yield this.loadFiles(config.javascripts.root, packConfig.files, packConfig.extensions || 'js'));
        files = (yield this.buildNonNativeFiles(app + "/" + pack, files, options, 'js'));
        results1.push(result.javascripts[pack] = (yield JS.compile(app + "/" + pack, files, options)));
      }
      return results1;
    }
  };

  exports.runAppCss = function*(app, config, result) {
    var files, options, pack, packConfig, ref, ref1, results1;
    if (config != null ? (ref = config.stylesheets) != null ? ref.packages : void 0 : void 0) {
      ref1 = config.stylesheets.packages;
      results1 = [];
      for (pack in ref1) {
        packConfig = ref1[pack];
        options = _.extend(_.omit(config.stylesheets, 'packages'), _.omit(packConfig, 'files', 'extensions'));
        files = (yield this.loadFiles(config.stylesheets.root, packConfig.files, packConfig.extensions || 'css'));
        files = (yield this.buildNonNativeFiles(app + "/" + pack, files, options, 'css'));
        results1.push(result.stylesheets[pack] = (yield CSS.compile(app + "/" + pack, files, options)));
      }
      return results1;
    }
  };

  exports.runAppRouting = function*(app, config, result) {
    if (config != null ? config.routing : void 0) {
      return result.routing = (yield Route.compile(config.routing));
    }
  };

  exports.loadFiles = function*(root, rules, extensions) {
    var excludes, files, filtered, i, include, includes, isExclude, j, len, len1, rule;
    if (!(rules && root)) {
      return [];
    }
    files = [];
    extensions = extensions.split(' ');
    files = (yield fs.readdir(root, null, []));
    includes = [];
    excludes = [];
    for (i = 0, len = rules.length; i < len; i++) {
      rule = rules[i];
      isExclude = false;
      if (rule.indexOf('-') === 0) {
        isExclude = true;
        rule = rule.substr(1);
      }
      rule = rule.replace(/\*/g, '.*?');
      rule = new RegExp("^" + rule + "$", 'i');
      if (isExclude) {
        excludes.push(rule);
      } else {
        includes.push(rule);
      }
    }
    files = _.chain(files).filter((function(_this) {
      return function(file) {
        var ref;
        return ref = path.extname(file).substr(1), indexOf.call(extensions, ref) >= 0;
      };
    })(this)).map((function(_this) {
      return function(file) {
        return path.relative(root, file);
      };
    })(this)).filter((function(_this) {
      return function(file) {
        var exclude, j, len1;
        for (j = 0, len1 = excludes.length; j < len1; j++) {
          exclude = excludes[j];
          if (exclude.test(file)) {
            return false;
          }
        }
        return true;
      };
    })(this)).value();
    filtered = [];
    for (j = 0, len1 = includes.length; j < len1; j++) {
      include = includes[j];
      _.each(files, (function(_this) {
        return function(file) {
          if (include.test(file) && !_.contains(filtered, file)) {
            return filtered.push(file);
          }
        };
      })(this));
    }
    return filtered;
  };

  exports.buildNonNativeFiles = function*(pack, files, options, nativeType) {
    var builtFiles, compiler, e, ext, f, file, i, len;
    builtFiles = [];
    for (f = i = 0, len = files.length; i < len; f = ++i) {
      file = files[f];
      ext = path.extname(file).substr(1);
      if (ext !== nativeType) {
        try {
          compiler = require("./compilers/" + ext);
          if (compiler.compilesTo !== nativeType) {
            throw new Error();
          }
        } catch (_error) {
          e = _error;
          throw new Error("Unsupported file type " + ext + "\n" + e.message);
        }
        builtFiles.push((yield compiler.compile(pack, file, options)));
      } else {
        builtFiles.push(file);
      }
    }
    return builtFiles;
  };

  return exports;

})();
