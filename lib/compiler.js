// Generated by CoffeeScript 1.8.0
var CSS, JS, Route, debug, fs, path, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('co-fs-plus');

debug = require('debug')('compiler');

_ = require('lodash');

path = require('path');

JS = require('./compilers/js');

CSS = require('./compilers/css');

Route = require('./compilers/route');

module.exports = (function() {
  function exports() {}

  exports.run = function*(config) {
    var app, appConfig;
    for (app in config) {
      appConfig = config[app];
      config[app] = (yield this.runApp(app, appConfig));
    }
    return config;
  };

  exports.runApp = function*(app, config) {
    var files, options, pack, packConfig, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    if ((config != null ? (_ref = config.javascripts) != null ? _ref.buildRoot : void 0 : void 0) != null) {
      (yield fs.rimraf(config.javascripts.buildRoot));
    }
    if ((config != null ? (_ref1 = config.stylesheets) != null ? _ref1.buildRoot : void 0 : void 0) != null) {
      (yield fs.rimraf(config.stylesheets.buildRoot));
    }
    if (config != null ? (_ref2 = config.javascripts) != null ? _ref2.packages : void 0 : void 0) {
      _ref3 = config.javascripts.packages;
      for (pack in _ref3) {
        packConfig = _ref3[pack];
        options = _.extend(_.omit(config.javascripts, 'packages'), _.omit(packConfig, 'files', 'extensions'));
        files = (yield this.loadFiles(config.javascripts.root, packConfig.files, packConfig.extensions || 'js'));
        files = this.buildNonNativeFiles(files, options, 'js');
        config.javascripts.packages[pack] = (yield JS.compile(pack, files, options));
      }
    }
    if (config != null ? (_ref4 = config.stylesheets) != null ? _ref4.packages : void 0 : void 0) {
      _ref5 = config.stylesheets.packages;
      for (pack in _ref5) {
        packConfig = _ref5[pack];
        options = _.extend(_.omit(config.stylesheets, 'packages'), _.omit(packConfig, 'files', 'extensions'));
        files = (yield this.loadFiles(config.stylesheets.root, packConfig.files, packConfig.extensions || 'css'));
        files = this.buildNonNativeFiles(files, options, 'css');
        config.stylesheets.packages[pack] = (yield CSS.compile(pack, files, options));
      }
    }
    if (config != null ? config.routing : void 0) {
      config.routing = (yield Route.compile(config.routing));
    }
    return config;
  };

  exports.loadFiles = function*(root, rules, extensions) {
    var excludes, files, filtered, include, includes, isExclude, rule, _i, _j, _len, _len1;
    if (!(rules && root)) {
      return [];
    }
    files = [];
    extensions = extensions.split(' ');
    files = (yield fs.readdir(root, null, []));
    includes = [];
    excludes = [];
    for (_i = 0, _len = rules.length; _i < _len; _i++) {
      rule = rules[_i];
      isExclude = false;
      if (rule.indexOf('-') === 0) {
        isExclude = true;
        rule = rule.substr(1);
      }
      rule = rule.replace(/\*/g, '.*?');
      rule = new RegExp("^" + rule + "$", 'i');
      if (isExclude) {
        excludes.push(rule);
      } else {
        includes.push(rule);
      }
    }
    files = _.chain(files).filter((function(_this) {
      return function(file) {
        var _ref;
        return _ref = path.extname(file).substr(1), __indexOf.call(extensions, _ref) >= 0;
      };
    })(this)).map((function(_this) {
      return function(file) {
        return path.relative(root, file);
      };
    })(this)).filter((function(_this) {
      return function(file) {
        var exclude, _j, _len1;
        for (_j = 0, _len1 = excludes.length; _j < _len1; _j++) {
          exclude = excludes[_j];
          if (exclude.test(file)) {
            return false;
          }
        }
        return true;
      };
    })(this)).value();
    filtered = [];
    for (_j = 0, _len1 = includes.length; _j < _len1; _j++) {
      include = includes[_j];
      _.each(files, (function(_this) {
        return function(file) {
          if (include.test(file) && !_.contains(filtered, file)) {
            return filtered.push(file);
          }
        };
      })(this));
    }
    return filtered;
  };

  exports.buildNonNativeFiles = function*(files, options, nativeType) {
    var builtFiles, compiler, e, ext, f, file, _i, _len;
    builtFiles = [];
    for (f = _i = 0, _len = files.length; _i < _len; f = ++_i) {
      file = files[f];
      ext = path.extname(file).substr(1);
      if (ext !== nativeType) {
        try {
          compiler = require("./compilers/" + ext);
          if (compiler.compilesTo !== nativeType) {
            throw new Error();
          }
        } catch (_error) {
          e = _error;
          throw new Error("Unsupported file type " + ext + "\n" + e.message);
        }
        builtFiles.push((yield compiler.compile(file, options)));
      } else {
        builtFiles.push(file);
      }
    }
    return builtFiles;
  };

  return exports;

})();
