// Generated by CoffeeScript 1.8.0
var CSS, JS, Route, async, debug, fs, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs-plus');

debug = require('debug')('compiler');

async = require('async');

JS = require('./compilers/js');

CSS = require('./compilers/css');

Route = require('./compilers/route');

_ = require('lodash');

async.objectMap = function(obj, func, cb) {
  var arr, i, keys, wrapper;
  arr = [];
  keys = Object.keys(obj);
  i = 0;
  while (i < keys.length) {
    wrapper = {};
    wrapper[keys[i]] = obj[keys[i]];
    arr[i] = wrapper;
    i += 1;
  }
  return this.map(arr, (function(_this) {
    return function(item, callback) {
      var key, value;
      for (key in item) {
        value = item[key];
        return func(key, value, callback);
      }
    };
  })(this), (function(_this) {
    return function(err, data) {
      var res;
      if (err) {
        return cb(err);
      }
      res = {};
      i = 0;
      while (i < data.length) {
        res[keys[i]] = data[i];
        i += 1;
      }
      return cb(err, res);
    };
  })(this));
};

module.exports = (function() {
  function exports() {}

  exports.run = function(config, runCallback) {
    var compile, write;
    return async.waterfall([
      compile = (function(_this) {
        return function(callback) {
          return async.objectMap(config, function(app, config, callback) {
            return _this.runApp(app, config, callback);
          }, function(err, config) {
            return callback(err, config);
          });
        };
      })(this), write = (function(_this) {
        return function(config, callback) {
          return fs.writeFile('.easyc/output.json', JSON.stringify(config), callback);
        };
      })(this)
    ], (function(_this) {
      return function(err, result) {
        if (err) {
          console.error(err);
        }
        return console.log(result);
      };
    })(this));
  };

  exports.runApp = function(app, config, callback) {
    return async.parallel({
      js: (function(_this) {
        return function(callback) {
          var _ref;
          if (!(config != null ? (_ref = config.javascripts) != null ? _ref.packages : void 0 : void 0)) {
            return callback();
          }
          return async.objectMap(config.javascripts.packages, function(pack, packConfig, callback) {
            var loadFiles, runCompiler;
            return async.waterfall([
              loadFiles = function(callback) {
                return _this.loadFiles(config.root, packConfig.javascripts, pack.extensions || 'js', callback);
              }, runCompiler = function(files, callback) {
                packConfig.files = files;
                return JS.compile(packConfig, callback);
              }
            ], function(err, data) {
              return callback(err, data);
            });
          }, function(err, packages) {
            return callback(err, packages);
          });
        };
      })(this),
      css: (function(_this) {
        return function(callback) {
          var _ref;
          if (!(config != null ? (_ref = config.stylesheets) != null ? _ref.packages : void 0 : void 0)) {
            return callback();
          }
          return async.objectMap(config.stylesheets.packages, function(pack, packConfig, callback) {
            var loadFiles, runCompiler;
            return async.waterfall([
              loadFiles = function(callback) {
                return _this.loadFiles(config.root, packConfig.stylesheets, pack.extensions || 'css', callback);
              }, runCompiler = function(files, callback) {
                packConfig.files = files;
                return CSS.compile(packConfig, callback);
              }
            ], function(err, data) {
              return callback(err, data);
            });
          }, function(err, packages) {
            return callback(err, packages);
          });
        };
      })(this),
      routes: (function(_this) {
        return function(callback) {
          if (!config.routing) {
            return callback();
          }
          return Route.compile(config.routing, callback);
        };
      })(this)
    }, (function(_this) {
      return function(err, results) {
        return callback(err, results);
      };
    })(this));
  };

  exports.loadFiles = function(root, rules, extensions, callback) {
    var files;
    if (!(rules && root)) {
      return callback(null, []);
    }
    files = [];
    extensions = extensions.split(' ');
    return fs.traverseTree(root, (function(_this) {
      return function(file) {
        return files.push(file);
      };
    })(this), (function(_this) {
      return function(dir) {
        return true;
      };
    })(this), (function(_this) {
      return function(err) {
        var excludes, filtered, include, includes, isExclude, rule, _i, _j, _len, _len1;
        if (err) {
          return callback(err);
        }
        includes = [];
        excludes = [];
        for (_i = 0, _len = rules.length; _i < _len; _i++) {
          rule = rules[_i];
          isExclude = false;
          if (rule.indexOf('-') === 0) {
            isExclude = true;
            rule = rule.substr(1);
          }
          rule = rule.replace(/\*/g, '.*?');
          rule = new RegExp("^" + rule + "$", 'i');
          if (isExclude) {
            excludes.push(rule);
          } else {
            includes.push(rule);
          }
        }
        files = _.chain(files).filter(function(file) {
          var _ref;
          return _ref = path.extname(file), __indexOf.call(extensions, _ref) >= 0;
        }).map(function(file) {
          return path.relative(root, file);
        }).filter(function(file) {
          var exclude, _j, _len1;
          for (_j = 0, _len1 = excludes.length; _j < _len1; _j++) {
            exclude = excludes[_j];
            if (exclude.test(file)) {
              return false;
            }
          }
          return true;
        }).value();
        filtered = [];
        for (_j = 0, _len1 = includes.length; _j < _len1; _j++) {
          include = includes[_j];
          _.each(files, function(file) {
            if (include.test(file) && !_.contains(filtered, file)) {
              return filtered.push(file);
            }
          });
        }
        return callback(null, filtered);
      };
    })(this));
  };

  return exports;

})();
